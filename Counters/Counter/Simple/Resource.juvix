module Counter.Simple.Resource;

import Stdlib.Prelude open;
import Applib open;

--- Constructs a counter with a quantity of 1 that can be consumed by the universal identity (and everyone who has composed their identity with it).
--- @param count The intial count.
--- @param ephemeral Whether the resource is ephemeral or not.
--- @return The constructed counter resource.
mkCounter
  (logic : Logic)
  (nonce : Nonce)
  {count : Nat := 0}
  {ephemeral : Bool := false}
  : Resource :=
  Resource.mk@{
    logic := Encoded.encode logic;
    label := Label.fromNat ("SimpleCounter" |> builtinAnomaEncode);
    value := AnomaAtom.fromNat count;
    quantity := 1;
    ephemeral;
    nullifierKeyCommitment := toAnomaContents Universal.pub;
    nonce := Nonce.toRaw nonce;
    unusedRandSeed := 0;
  };

valid-counter? (args : Logic.Arg) : Bool :=
  let
    self := Logic.Arg.self args;
    isConsumed := Logic.Arg.isConsumed args;
  in if
    | isConsumed :=
      if
        | Resource.ephemeral self := Resource.quantity self == 1
        | else := increment-correct? args
    | else := not (Resource.ephemeral self);

increment-correct? (args : Logic.Arg) : Bool :=
  let
    self := Logic.Arg.self args;
  in case Logic.Arg.consumed args, Logic.Arg.created args of
       | [consumed], [created] :=
         same-kind? [self; consumed; created] && incremented? consumed created
       | _, _ := false;

same-kind? : List Resource -> Bool
  | nil := true
  | (x :: xs) := all \{y := kind y == kind x} xs;

getCount : Resource -> Nat := Resource.value >> AnomaAtom.toNat;

incremented? (consumed created : Resource) : Bool :=
  getCount consumed + 1 == getCount created;
