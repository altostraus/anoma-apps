module Counter.Unique.ConsumableTransaction;

import Stdlib.Prelude open;
import Applib open;

--- Returns a ;Transaction; that creates the passed ;Resource;
createConsumableTransaction
  {M : Type -> Type}
  {{Tx M}}
  {{Monad M}}
  (resource : Resource)
  : M Transaction :=
  let
    delta := zeroDelta;
    -- deltaProof := proveDelta delta;
    consumedResource := resource@Resource{ephemeral := true};
    createdResource := resource;
  in mkTransactionNoPublicData@{
       consumed := [consumedResource];
       created := [createdResource];
     };

main (resource : Resource) : TransactionRequest :=
  resource |> createConsumableTransaction |> TransactionRequest.fromTransaction;
