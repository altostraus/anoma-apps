module Counter.Unique.Logic;

import Stdlib.Prelude open;
import Applib open;

initialize-correct? (res : Resource) (args : Logic.Args) : Bool :=
  let
    quantity := Resource.quantity res;
  in quantity == 1 && Logic.Args.isConsumed args;

same-kind? : List Resource -> Bool
  | nil := true
  | (x :: xs) := all \{y := kind y == kind x} xs;

incremented? (consumed created : Resource) : Bool :=
  let
    getVal : Resource -> Nat := Resource.value >> AnomaAtom.toNat;
  in getVal consumed + 1 == getVal created;

increment-correct? (res : Resource) (args : Logic.Args) : Bool :=
  case Logic.Args.consumed args, Logic.Args.created args of
    | [consumed], [created] :=
      same-kind? [res; consumed; created] && incremented? consumed created
    | _, _ := false;

counter-correct? (args : Logic.Args) : Bool :=
  let
    isConsumed := Logic.Args.isConsumed args;
  in if
    | isConsumed :=
      case Logic.Args.consumed args, Logic.Args.created args of {
        | [consumable; ephCounter], [ephConsumable; newCounter] :=
          -- This is called for consumable and ephCounter
            initialize-correct?
            ephCounter
            args
        | [prevCounter], [nextCounter] := increment-correct? prevCounter args
        | _ := false
      }
    | else := true;

type LogicWrapper :=
  mk@{
    logic : Logic;
  };

main : LogicWrapper := LogicWrapper.mk (Logic.mk counter-correct?);
