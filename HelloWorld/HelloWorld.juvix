module HelloWorld;

import Stdlib.Prelude open;
import Applib open;

--- A logic function that is always valid.
logic (publicInputs : Instance) (privateInputs : Witness) : Bool := true;

--- Creates a new ;Resource; that stores a ;String; message.
--- @param nonce A number used to ensure resource uniqueness
--- @param message The message to store in the ;Resource;.
mkHelloWorldResource
  (nonce : Nat) (message : String) {ephemeral : Bool := false} : Resource :=
  mkResource@{
    label := builtinAnomaEncode message;
    logic;
    value := 0;
    quantity := 1;
    nonce;
    ephemeral;
    randSeed := 0;
    nullifierKeyCommitment := 0;
  };

--- Produces a ;Transaction; that creates a HelloWorld ;Resource;
--- @param nonce A number used to ensure ;Resource; uniqueness.
--- @param message The message to store in the ;Resource;
helloWorldTransaction
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (nonce : Nat)
  (label : String)
  : M Transaction :=
  do {
    let
      newResource := mkHelloWorldResource nonce label;
    in
    prepareStandardTransaction@{
      -- A Transaction must be balanced, so we consume an ephemeral resource of
      -- the same kind as the one we're creating.
      consumed := [newResource@Resource{ephemeral := true}];
      created := [newResource];
    };
  };

ctx : TxContext :=
  mkTxContext@{
    caller := Universal.identity;
    currentRoot := mkRoot 0;
  };

--- The function that is run to produce a Transaction to send to Anoma.
main (message : String) : TransactionRequest :=
  buildTransactionRequest 0 ctx (helloWorldTransaction 0 message);
