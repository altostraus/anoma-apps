module Counter.Simple.Increment;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};
import Stdlib.Data.Set as Set open using {Set};
import Stdlib.Data.Map as Map;
import Anoma open;
import Anoma.State.CommitmentTree open;
import Applib.Helpers open;
import Applib.Identities open;

import Counter.Simple.Resource open;
import BaseLayer.TransactionRequest open;
import BaseLayer.ResourceMachine open;

--- Increments the counter value by 1.
--- @param currentCounter The current counter to increment.
--- @param standardInputs The transaction function standard inputs.
--- @return The transaction object incrementing a counter.
increment
  (logic : Logic) (standardInputs : StandardInputs) (currentCounter : Resource) : Transaction :=
  let
    nonce := generateNonce (StandardInputs.randSeed standardInputs);
    newCounter :=
      mkCounter@{
        logic;
        nonce;
        count := Resource.value currentCounter + 1;
      };

  in prepareStandardTransaction@{
       standardInputs;
       consumed := [currentCounter];
       created := [newCounter];
     };

main (logicEncoded currentCounterEncoded latestRoot : Nat): TransactionRequest :=
  let
    logic : Logic := anomaDecode logicEncoded;
    currentCounter : Resource := anomaDecode currentCounterEncoded;
    std :=
      mkStandardInputs@{
        caller := Universal.identity;
        currentRoot := mkRoot latestRoot;
        randSeed := 0;
      };
    (nonce1, nonce2) := generateNoncePair (StandardInputs.randSeed std);
  in increment logic std currentCounter |> TransactionRequest.fromTransaction;
