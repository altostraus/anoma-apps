module Counter.Simple.Logic;

import Stdlib.Prelude open;

import BaseLayer.ResourceMachine open;
import Applib.Helpers open;

valid-counter? : Instance -> Witness -> Bool
 | pub priv :=
  case findResource (Instance.tag pub) priv of
    | ConsumedRes self :=
      if
        | Resource.ephemeral self := Resource.quantity self == 1
        | else := increment-correct? self priv
    | CreatedRes self := not (Resource.ephemeral self)
    | NonExisting := false;

increment-correct? (self : Resource) (private : Witness) : Bool :=
  case Witness.consumed private, Witness.created private of
    | [consumed], [created] :=
      same-kind? [self; consumed; created] && incremented? consumed created
    | _, _ := false;

same-kind? : List Resource -> Bool
  | nil := true
  | (x :: xs) := all \{y := kind y == kind x} xs;

incremented? : Resource -> Resource -> Bool
  | consumed created := Resource.value consumed + 1 == Resource.value created;
