module HelloWorld;

import Stdlib.Prelude open;
import Applib open;

open Shielded;

--- The label for HelloWorld resources
label : Label := Label.mk (builtinAnomaEncode "HelloWorld");

mkHelloWorldConsumedResource
  (nonce : Nat)
  (message : String)
  {ephemeral : Bool := false}
  : ConsumedResource :=
  ConsumedResource.mk@{
    label;
    value := AnomaAtom.mk (builtinAnomaEncode message);
    quantity := 1;
    nonce := Nonce.fromNat nonce;
    ephemeral;
    randSeed := 0;
  };

mkHelloWorldCreatedResource
  (nonce : Nat)
  (message : String)
  {ephemeral : Bool := false}
  : CreatedResource :=
  CreatedResource.mk@{
    label;
    value := AnomaAtom.mk (builtinAnomaEncode message);
    quantity := 1;
    nonce := Nonce.fromNat nonce;
    ephemeral;
    randSeed := 0;
    nullifierKeyCommitment := NullifierKeyCommitment.mk (ByteArray.zero 1);
  };

--- Produces a ;Transaction; that creates a HelloWorld ;Resource;
--- @param nonce A number used to ensure ;Resource; uniqueness.
--- @param message The message to store in the ;Resource;
helloWorldTransaction
  {M : Type -> Type}
  {{Monad M}}
  {{Tx M}}
  (logic : Logic)
  (nonce : Nat)
  (message : String)
  : M Transaction :=
  do {
    let
      consumedResource := mkHelloWorldConsumedResource@{nonce; message; ephemeral := true};
      createdResource := mkHelloWorldCreatedResource nonce message;
    in
    todo
  };

ctx : TxContext :=
  TxContext.mk@{
    caller := Universal.identity;
    currentRoot := CommitmentRoot.fromNat 0;
  };

--- The function that is run to produce a Transaction to send to Anoma.
main (logic : Logic) (message : String) : TransactionRequest :=
  TransactionRequest.build 0 ctx (helloWorldTransaction logic 0 message);
