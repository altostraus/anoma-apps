module HelloWorld;

import Stdlib.Prelude open;
import Applib open;

open Shielded;

--- The label for HelloWorld resources
label : Label := Label.mk (builtinAnomaEncode "HelloWorld");

mkHelloWorldConsumedResource
  (nonce : Nat)
  (message : String)
  {ephemeral : Bool := true}
  : ConsumedResource :=
  ConsumedResource.mk@{
    label;
    value := AnomaAtom.mk (builtinAnomaEncode message);
    quantity := 1;
    nonce := Nonce.fromNat nonce;
    ephemeral;
    randSeed := 0;
  };

mkHelloWorldCreatedResource
  (nonce : Nat)
  (message : String)
  {ephemeral : Bool := false}
  : CreatedResource :=
  CreatedResource.mk@{
    label;
    value := AnomaAtom.mk (builtinAnomaEncode message);
    quantity := 1;
    nonce := Nonce.fromNat nonce;
    ephemeral;
    randSeed := 0;
    -- TODO: can this be arbitrary?
    nullifierKeyCommitment := NullifierKeyCommitment.mk (ByteArray.zero 1);
  };

--- Produces a ;Transaction; that creates a HelloWorld ;Resource;
--- @param nonce A number used to ensure ;Resource; uniqueness.
--- @param message The message to store in the ;Resource;
helloWorldTransaction
  (logic : ByteArray) (nonce : Nat) (message : String) : Transaction :=
  let
    complianceInputs :=
      ComplianceInputs.mk@{
        consumedResource := mkHelloWorldConsumedResource nonce message;
        createdResource := mkHelloWorldCreatedResource nonce message;
        inputNullifierKey :=
          NullifierKey.fromByteArray (ByteArray.mk [Byte.fromNat 1]);
        -- merklePath is arbitrary (unused) for ephemeral resources
        merklePath := MerklePath.mk (replicate 32 (0, false));
        -- rcv can be chosen randomly
        rcv := 3;
        ephRoot := Cairo.defaultCairoRoot;
      };
    witnessJson := Json.object [];
  in createFromComplianceInputs [complianceInputs] [logic] [witnessJson] [logic] [witnessJson];

--- The function that is run to produce a Transaction to send to Anoma.
main (logic : ByteArray) (message : String) : TransactionRequest :=
  TransactionRequest.fromTransaction (helloWorldTransaction logic 0 message);
