module Kudos.Instantiate;

import Anoma open;
import Kudos.Extra open;
import Kudos.Logic open;
import Kudos.Types open;
import Stdlib.Prelude open;

--- Instantiate a quantity of kudo assigned to a new owner
instantiate
  (commitmentKeyPair : KeyPair)
  (kudoOwner : Owner)
  (kudoOriginatorKeyPair : KeyPair)
  (n : Nat)
  : Transaction :=
  let
    commitmentPubKey := KeyPair.pubKey commitmentKeyPair;
    commitmentPrivKey := KeyPair.privKey commitmentKeyPair;
    originatorPrivKey := KeyPair.privKey kudoOriginatorKeyPair;
    originatorPubKey := KeyPair.pubKey kudoOriginatorKeyPair;

    consumed :=
      instantiateConsume
        commitmentPubKey
        kudoOriginatorKeyPair
        n;
    created :=
      instantiateCreate
        commitmentPubKey
        kudoOwner
        originatorPubKey
        n;
  in instantiateMkSignedTx
    commitmentPrivKey
    originatorPrivKey
    consumed
    created;

--- Create a kudo ;Resource; for instantiation, labeled for the originator and produces the originator ;Signature;
instantiateOriginatorKind
  (commitmentPublicKey : PublicKey)
  (origPubKey : PublicKey)
  (n : Nat)
  : Resource :=
  let
    resLabel :=
      mkKudoLabel@{
        originatorPublicKey := origPubKey
      };
  in Resource.mk@{
    logic := kudoLogic;
    label := anomaEncode resLabel;
    quantity := n;
    data := 0;
    eph := false;
    npk := commitmentPublicKey;
    nonce := 0;
    rseed := 0
  };

--- Create a kudo created ;Resource; for instantiation, owned by the originator.
instantiateConsume
  (commitmentPublicKey : PublicKey)
  (kudoOriginatorKeyPair : KeyPair)
  (n : Nat)
  : Resource :=
  let
    origPubKey := KeyPair.pubKey kudoOriginatorKeyPair;
    origKindResource :=
      instantiateOriginatorKind
        commitmentPublicKey
        origPubKey
        n;
  in origKindResource@Resource{
    eph := true;
    data := anomaEncode
      mkKudoValue@{
        owner := mkOwner origPubKey
      }
  };

--- Create a kudo ;Resource; for instantiation, owned by the target owner.
instantiateCreate
  (commitmentPublicKey : PublicKey)
  (kudoOwner : Owner)
  (kudoOriginatorPublicKey : PublicKey)
  (n : Nat)
  : Resource :=
  let
    origKindResource : Resource :=
      instantiateOriginatorKind
        commitmentPublicKey
        kudoOriginatorPublicKey
        n;
  in origKindResource@Resource{
    eph := false;
    data := anomaEncode
      mkKudoValue@{
        owner := kudoOwner
      }
  };

instantiateMkSignedTx
  (commitmentPrivKey : PrivateKey)
  (ownerPrivKey : PrivateKey)
  (consumed : Resource)
  (created : Resource)
  : Transaction :=
  let
    unsignedTx :=
      Transaction.mk@{
        roots := [];
        commitments := [commitment created];
        nullifiers := [nullifier consumed commitmentPrivKey];
        proofs := [consumed; created];
        delta := [];
        extra := 0;
        preference := 0
      };
  in signOwner ownerPrivKey unsignedTx;
