module Kudos;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Token.Transaction open;
import Token.Logic open;
import Token.Error open;
import Token.Supply open;

import Label open;

--- Creates an amount of Kudo tokens to a receiver.
create
  (self : KeyPair)
  (amount : Nat)
  (receiver : PublicKey)
  : Either TokenError Transaction :=
  let
    kudoLabel : Label := mkKudoLabel (KeyPair.pubKey self);
  in Token.Transaction.mint self kudoLabel amount receiver;

--- Sends an amount of Kudo tokens to a receiver.
--- If the token ;Resource; has no Kudos ;Label; this function returns nothing.
--- If the token logic function differs from the current implementation, this function returns nothing,
--- If the calling ;KeyPair; is not the owner, this function returns nothing.
send
  (self : KeyPair)
  (token : Resource)
  (amount : Nat)
  (receiver : PublicKey)
  : Either TokenError Transaction :=
  let
    expectedLabel :=
      mkLabel@{
        name := getName token;
        symbol := "Kudos";
        decimals := 18;
        supply := Unbound
      };
    actualLabel := getLabel token;

    expectedLogic := anomaEncode tokenLogic;
    actualLogic := Resource.logic token;
  in if
    | expectedLabel /= actualLabel :=
      throw
        mkInvalidLabelError@{
          expected := expectedLabel;
          actual := actualLabel
        }
    | else := Token.Transaction.send self token amount receiver;
