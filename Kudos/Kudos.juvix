module Kudos;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Token.Transaction open;
import Token.Logic open;
import Token.Error open;
import Token.Supply open;

import Label open;

--- Creates an amount of Kudo tokens to a receiver.
create
  (_self : KeyPair)
  (_amount : Nat)
  (_receiver : PublicKey)
  : Either TokenError Transaction :=
  Token.Transaction.mint@{
    self := _self;
    label :=
      mkKudoLabel@{
        originator := KeyPair.pubKey _self
      };
    amount := _amount;
    receiver := _receiver
  };

--- Sends an amount of Kudo tokens to a receiver.
--- If the token ;Resource; has no Kudos ;Label; this function returns nothing.
--- If the token logic function differs from the current implementation, this function returns nothing,
--- If the calling ;KeyPair; is not the owner, this function returns nothing.
send
  (_self : KeyPair)
  (_token : Resource)
  (_amount : Nat)
  (_receiver : PublicKey)
  : Either TokenError Transaction :=
  let
    expectedLabel :=
      mkLabel@{
        name := getName _token;
        symbol := "Kudos";
        decimals := 18;
        supply := Unbound
      };
    actualLabel := getLabel _token;

    expectedLogic := anomaEncode tokenLogic;
    actualLogic := Resource.logic _token;
  in if
    | expectedLabel /= actualLabel :=
      throw
        mkInvalidLabelError@{
          expected := expectedLabel;
          actual := actualLabel
        }
    | else :=
      Token.Transaction.send@{
        self := _self;
        token := _token;
        amount := _amount;
        receiver := _receiver
      };
