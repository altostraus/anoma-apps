module Transaction;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Token.Transaction open;
import Token.Logic open;
import Token.Label open;
import Token.Error open;
import Token.Supply open;

import Label open;

--- Creates an amount of Kudo tokens to a receiver.
create (self : KeyPair) (amount : Nat) (receiver : PublicKey) : Either TokenError Transaction :=
  Token.Transaction.initialize@{
    self;
    label := mkKudoLabel (KeyPair.pubKey self);
    amount;
    receiver
  };

--- Sends an amount of Kudo tokens to a receiver.
--- If the token ;Resource; has no Kudos ;Label; or
--- the token logic function differs from the current
--- implementation, this function returns an error.
send
  (self : KeyPair)
  (token : Resource)
  (amount : Nat)
  (receiver : PublicKey)
  : Either TokenError Transaction :=
  case isKudo token self of
    | false := throw notKudoError
    | true :=
      Token.Transaction.send@{
        self;
        token;
        amount;
        receiver
      };

notKudoError : Error :=
  mkError@{
    msg := "The input resource is not a Kudo token."
  };
