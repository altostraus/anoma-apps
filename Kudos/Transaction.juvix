module Transaction;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Token.Transaction open;
import Token.Logic open;
import Token.Label open;
import Token.Error open;
import Token.Supply open;

import Label open;

--- Creates an amount of Kudo tokens to a receiver.
create
  (_self : KeyPair)
  (_amount : Nat)
  (_receiver : PublicKey)
  : Either TokenError Transaction :=
  Token.Transaction.initialize@{
    self := _self;
    label :=
      mkKudoLabel@{
        originator := KeyPair.pubKey _self
      };
    amount := _amount;
    receiver := _receiver
  };

--- Sends an amount of Kudo tokens to a receiver.
--- If the token ;Resource; has no Kudos ;Label; or
--- the token logic function differs from the current
--- implementation, this function returns an error.
send
  (_self : KeyPair)
  (_token : Resource)
  (_amount : Nat)
  (_receiver : PublicKey)
  : Either TokenError Transaction :=
  case isKudo _token _self of
    | false :=
      throw
        mkError@{
          msg := "The input resource is not a Kudo token."
        }
    | true :=
      Token.Transaction.send@{
        self := _self;
        token := _token;
        amount := _amount;
        receiver := _receiver
      };
